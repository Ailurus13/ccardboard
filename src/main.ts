import path from 'path';
import {
  app,
  BrowserWindow,
  dialog,
  ipcMain,
  IpcMainInvokeEvent,
  protocol,
  session,
} from 'electron';
import { Movie } from '@common/entity/Movie.entity';
import { CreateMovieRequestDTO } from '@common/dto/CreateMovieRequest.dto';
import { createMovie, getAllMovies } from '@main/services/movie.service';
import {
  getConfiguration,
  setConfiguration,
} from '@main/services/configuration.service';
import { db } from '@main/db';
import { generateVideo } from '@main/generate-video';
import { fetchPoster } from '@main/fetch-poster';
import { AppFileStorage } from '@main/file-storage';
import { ElectronApiResponse } from './preload';
import 'reflect-metadata';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

const register = <Args, Response>(
  key: string,
  cb: (event: IpcMainInvokeEvent, args: Args) => Response | Promise<Response>
) => {
  ipcMain.handle(key, cb);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  await db.initialize();

  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': ['img-src filestorage:;'],
      },
    });
  });

  const filestoragePath = path.join(
    app.getPath('appData'),
    'ccardboard-storage',
    'files'
  );

  protocol.registerFileProtocol('filestorage', (request, cb) => {
    const url = request.url.replace('filestorage://', '');
    const new_url = path.normalize(`${filestoragePath}/${url}`);
    console.log(`Loading file at ${new_url}`);
    cb({ path: new_url });
  });

  const appFileStorage = new AppFileStorage(filestoragePath);

  // TODO: Find a way to link this type to preload type
  register<CreateMovieRequestDTO, ElectronApiResponse<Movie>>(
    'movie:create',
    async (_, movie) => {
      const { poster } = movie;

      const imageBuffer = await fetchPoster(poster);
      const posterId = await appFileStorage.store(imageBuffer);

      if (!posterId) {
        throw new Error(`Poster type ${poster.type} does not exists`);
      }

      const createdMovie = await createMovie({
        ...movie,
        poster: posterId,
      });

      return [createdMovie];
    }
  );

  ipcMain.handle('movie:getAll', async () => {
    const movies = await getAllMovies();
    return [movies];
  });

  ipcMain.handle('configuration:get', async (_, key) => {
    const config = await getConfiguration(key);
    return [config];
  });

  ipcMain.handle('configuration:set', async (_, key, value) => {
    const savedConfig = await setConfiguration(key, value);
    return [savedConfig];
  });

  ipcMain.handle('download-remotion', async () => {
    const output = dialog.showSaveDialogSync({
      filters: [{ name: 'MP4', extensions: ['mp4'] }],
    });
    if (output) {
      await generateVideo(output);
    }
  });

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
